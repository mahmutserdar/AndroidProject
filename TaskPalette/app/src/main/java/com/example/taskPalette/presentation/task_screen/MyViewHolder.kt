package com.example.taskPalette.presentation.task_screenimport android.annotation.SuppressLintimport android.graphics.Paintimport androidx.recyclerview.widget.RecyclerViewimport com.example.taskPalette.data.models.Taskimport com.example.taskPalette.databinding.TaskItemViewBindingimport com.example.taskPalette.utils.DateUtils.getRemainingTimeimport com.example.taskPalette.utils.toGoneimport com.example.taskPalette.utils.toVisibleclass MyViewHolder(private val binding: TaskItemViewBinding) : RecyclerView.ViewHolder(binding.root), CounterAble {    var expiresAt: Long? = null    fun bind(task: Task, updateTask: (Task) -> Unit) {        expiresAt = task.expiresAt        binding.apply {            root.setBackgroundColor(task.color)            taskText.text = task.taskText            checkbox.isChecked = task.isChecked            checkbox.setOnClickListener {                task.isChecked = !task.isChecked                updateTask(task)            }            taskText.paintFlags = if (task.isChecked) {                taskText.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG            } else {                taskText.paintFlags and Paint.STRIKE_THRU_TEXT_FLAG.inv()            }            if (task.expiresAt == null) {                taskCounter.toGone()            }            taskCounter.paintFlags = if(task.isChecked){                taskCounter.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG            }else{                taskCounter.paintFlags and Paint.STRIKE_THRU_TEXT_FLAG.inv()            }        }    }    @SuppressLint("SetTextI18n")    override fun updateCounter() {        expiresAt?.let {            binding.taskCounter.toVisible()            val currentTime = System.currentTimeMillis() / 1000            val remainingTime = (it / 1000) - currentTime            binding.taskCounter.text = if (remainingTime > 0) {                getRemainingTime(remainingTime)            } else {                "Expired"            }        } ?: run {            binding.taskCounter.toGone()        }    }}